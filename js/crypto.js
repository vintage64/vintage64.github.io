function urlB64ToUint8Array(base64String){const suffixLength=4-base64String.length%4;const base64=(base64String+'='.repeat(suffixLength)).replace(/\-/g,'+').replace(/_/g,'/');const raw=window.atob(base64);const output=new Uint8Array(raw.length);Array.from(raw).forEach((c,i)=>output[i]=c.charCodeAt(0));return output;}
function stringToBase64Url(s){const base64=window.btoa(s);return base64.replace(/\+/g,'-').replace(/\//g,'_').replace(/\=+$/,'');}
function JSONToBase64Url(data){const s=JSON.stringify(data);return stringToBase64Url(s);}
function uint8ArrayToBase64Url(array){const s=String.fromCodePoint(...array);return stringToBase64Url(s);}
function prepareAuthorization(publicKey,privateKey,endpoint,sender){const origin=new URL(endpoint).origin;const defaultExpiration=Math.floor(Date.now()/1000)+43200;const header={typ:'JWT',alg:'ES256'};const jwtPayload={aud:origin,exp:defaultExpiration,sub:sender,};const unsignedToken=JSONToBase64Url(header)+'.'+JSONToBase64Url(jwtPayload);const publicKeyArray=urlB64ToUint8Array(publicKey);const key={kty:'EC',crv:'P-256',x:uint8ArrayToBase64Url(publicKeyArray.subarray(1,33)),y:uint8ArrayToBase64Url(publicKeyArray.subarray(33,65)),d:privateKey,};const args={name:'ECDSA',namedCurve:'P-256'};return crypto.subtle.importKey('jwk',key,args,true,['sign']).then(key=>{return crypto.subtle.sign({name:'ECDSA',hash:{name:'SHA-256',},},key,(new TextEncoder('utf-8')).encode(unsignedToken));}).then(buffer=>new Uint8Array(buffer)).then(signature=>{return'WebPush '+unsignedToken+'.'+uint8ArrayToBase64Url(signature);});}